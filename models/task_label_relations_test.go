// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTaskLabelRelations(t *testing.T) {
	t.Parallel()

	query := TaskLabelRelations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTaskLabelRelationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaskLabelRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaskLabelRelationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TaskLabelRelations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaskLabelRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaskLabelRelationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TaskLabelRelationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaskLabelRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaskLabelRelationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TaskLabelRelationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TaskLabelRelation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TaskLabelRelationExists to return true, but got false.")
	}
}

func testTaskLabelRelationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	taskLabelRelationFound, err := FindTaskLabelRelation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if taskLabelRelationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTaskLabelRelationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TaskLabelRelations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTaskLabelRelationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TaskLabelRelations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTaskLabelRelationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taskLabelRelationOne := &TaskLabelRelation{}
	taskLabelRelationTwo := &TaskLabelRelation{}
	if err = randomize.Struct(seed, taskLabelRelationOne, taskLabelRelationDBTypes, false, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}
	if err = randomize.Struct(seed, taskLabelRelationTwo, taskLabelRelationDBTypes, false, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = taskLabelRelationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = taskLabelRelationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TaskLabelRelations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTaskLabelRelationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	taskLabelRelationOne := &TaskLabelRelation{}
	taskLabelRelationTwo := &TaskLabelRelation{}
	if err = randomize.Struct(seed, taskLabelRelationOne, taskLabelRelationDBTypes, false, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}
	if err = randomize.Struct(seed, taskLabelRelationTwo, taskLabelRelationDBTypes, false, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = taskLabelRelationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = taskLabelRelationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskLabelRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func taskLabelRelationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TaskLabelRelation) error {
	*o = TaskLabelRelation{}
	return nil
}

func taskLabelRelationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TaskLabelRelation) error {
	*o = TaskLabelRelation{}
	return nil
}

func taskLabelRelationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TaskLabelRelation) error {
	*o = TaskLabelRelation{}
	return nil
}

func taskLabelRelationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TaskLabelRelation) error {
	*o = TaskLabelRelation{}
	return nil
}

func taskLabelRelationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TaskLabelRelation) error {
	*o = TaskLabelRelation{}
	return nil
}

func taskLabelRelationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TaskLabelRelation) error {
	*o = TaskLabelRelation{}
	return nil
}

func taskLabelRelationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TaskLabelRelation) error {
	*o = TaskLabelRelation{}
	return nil
}

func taskLabelRelationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TaskLabelRelation) error {
	*o = TaskLabelRelation{}
	return nil
}

func taskLabelRelationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TaskLabelRelation) error {
	*o = TaskLabelRelation{}
	return nil
}

func testTaskLabelRelationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TaskLabelRelation{}
	o := &TaskLabelRelation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation object: %s", err)
	}

	AddTaskLabelRelationHook(boil.BeforeInsertHook, taskLabelRelationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	taskLabelRelationBeforeInsertHooks = []TaskLabelRelationHook{}

	AddTaskLabelRelationHook(boil.AfterInsertHook, taskLabelRelationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	taskLabelRelationAfterInsertHooks = []TaskLabelRelationHook{}

	AddTaskLabelRelationHook(boil.AfterSelectHook, taskLabelRelationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	taskLabelRelationAfterSelectHooks = []TaskLabelRelationHook{}

	AddTaskLabelRelationHook(boil.BeforeUpdateHook, taskLabelRelationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	taskLabelRelationBeforeUpdateHooks = []TaskLabelRelationHook{}

	AddTaskLabelRelationHook(boil.AfterUpdateHook, taskLabelRelationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	taskLabelRelationAfterUpdateHooks = []TaskLabelRelationHook{}

	AddTaskLabelRelationHook(boil.BeforeDeleteHook, taskLabelRelationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	taskLabelRelationBeforeDeleteHooks = []TaskLabelRelationHook{}

	AddTaskLabelRelationHook(boil.AfterDeleteHook, taskLabelRelationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	taskLabelRelationAfterDeleteHooks = []TaskLabelRelationHook{}

	AddTaskLabelRelationHook(boil.BeforeUpsertHook, taskLabelRelationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	taskLabelRelationBeforeUpsertHooks = []TaskLabelRelationHook{}

	AddTaskLabelRelationHook(boil.AfterUpsertHook, taskLabelRelationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	taskLabelRelationAfterUpsertHooks = []TaskLabelRelationHook{}
}

func testTaskLabelRelationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskLabelRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaskLabelRelationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(taskLabelRelationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TaskLabelRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaskLabelRelationToOneLabelUsingLabel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TaskLabelRelation
	var foreign Label

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, taskLabelRelationDBTypes, false, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, labelDBTypes, false, labelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Label struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LabelID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Label().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddLabelHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Label) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TaskLabelRelationSlice{&local}
	if err = local.L.LoadLabel(ctx, tx, false, (*[]*TaskLabelRelation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Label == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Label = nil
	if err = local.L.LoadLabel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Label == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTaskLabelRelationToOneTaskUsingTask(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TaskLabelRelation
	var foreign Task

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, taskLabelRelationDBTypes, false, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TaskID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Task().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddTaskHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Task) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TaskLabelRelationSlice{&local}
	if err = local.L.LoadTask(ctx, tx, false, (*[]*TaskLabelRelation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Task == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Task = nil
	if err = local.L.LoadTask(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Task == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTaskLabelRelationToOneSetOpLabelUsingLabel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TaskLabelRelation
	var b, c Label

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskLabelRelationDBTypes, false, strmangle.SetComplement(taskLabelRelationPrimaryKeyColumns, taskLabelRelationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, labelDBTypes, false, strmangle.SetComplement(labelPrimaryKeyColumns, labelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, labelDBTypes, false, strmangle.SetComplement(labelPrimaryKeyColumns, labelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Label{&b, &c} {
		err = a.SetLabel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Label != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TaskLabelRelations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LabelID != x.ID {
			t.Error("foreign key was wrong value", a.LabelID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LabelID))
		reflect.Indirect(reflect.ValueOf(&a.LabelID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LabelID != x.ID {
			t.Error("foreign key was wrong value", a.LabelID, x.ID)
		}
	}
}
func testTaskLabelRelationToOneSetOpTaskUsingTask(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TaskLabelRelation
	var b, c Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskLabelRelationDBTypes, false, strmangle.SetComplement(taskLabelRelationPrimaryKeyColumns, taskLabelRelationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Task{&b, &c} {
		err = a.SetTask(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Task != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TaskLabelRelations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TaskID != x.ID {
			t.Error("foreign key was wrong value", a.TaskID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TaskID))
		reflect.Indirect(reflect.ValueOf(&a.TaskID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TaskID != x.ID {
			t.Error("foreign key was wrong value", a.TaskID, x.ID)
		}
	}
}

func testTaskLabelRelationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTaskLabelRelationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TaskLabelRelationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTaskLabelRelationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TaskLabelRelations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	taskLabelRelationDBTypes = map[string]string{`ID`: `uuid`, `TaskID`: `uuid`, `LabelID`: `uuid`}
	_                        = bytes.MinRead
)

func testTaskLabelRelationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(taskLabelRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(taskLabelRelationAllColumns) == len(taskLabelRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskLabelRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTaskLabelRelationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(taskLabelRelationAllColumns) == len(taskLabelRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TaskLabelRelation{}
	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskLabelRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, taskLabelRelationDBTypes, true, taskLabelRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(taskLabelRelationAllColumns, taskLabelRelationPrimaryKeyColumns) {
		fields = taskLabelRelationAllColumns
	} else {
		fields = strmangle.SetComplement(
			taskLabelRelationAllColumns,
			taskLabelRelationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TaskLabelRelationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTaskLabelRelationsUpsert(t *testing.T) {
	t.Parallel()

	if len(taskLabelRelationAllColumns) == len(taskLabelRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TaskLabelRelation{}
	if err = randomize.Struct(seed, &o, taskLabelRelationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TaskLabelRelation: %s", err)
	}

	count, err := TaskLabelRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, taskLabelRelationDBTypes, false, taskLabelRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaskLabelRelation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TaskLabelRelation: %s", err)
	}

	count, err = TaskLabelRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
