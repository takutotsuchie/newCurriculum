// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Limit struct {
	UserID string   `json:"userID"`
	When   WhenType `json:"when"`
}

type NewTask struct {
	ID          string     `json:"id"`
	Title       string     `json:"title"`
	Explanation string     `json:"explanation"`
	Limit       string     `json:"limit"`
	Priority    int        `json:"priority"`
	Status      TaskStatus `json:"status"`
	UserID      string     `json:"user_id"`
	LabelValue  int        `json:"label_value"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type TaskStatus string

const (
	TaskStatusTodo      TaskStatus = "Todo"
	TaskStatusOngoing   TaskStatus = "ongoing"
	TaskStatusCompleted TaskStatus = "completed"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusTodo,
	TaskStatusOngoing,
	TaskStatusCompleted,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusTodo, TaskStatusOngoing, TaskStatusCompleted:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WhenType string

const (
	WhenTypeDefault WhenType = "default"
	WhenTypeNow     WhenType = "now"
)

var AllWhenType = []WhenType{
	WhenTypeDefault,
	WhenTypeNow,
}

func (e WhenType) IsValid() bool {
	switch e {
	case WhenTypeDefault, WhenTypeNow:
		return true
	}
	return false
}

func (e WhenType) String() string {
	return string(e)
}

func (e *WhenType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WhenType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid whenType", str)
	}
	return nil
}

func (e WhenType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
