// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TaskLabelRelation is an object representing the database table.
type TaskLabelRelation struct {
	ID      string `boil:"id" json:"id" toml:"id" yaml:"id"`
	TaskID  string `boil:"task_id" json:"task_id" toml:"task_id" yaml:"task_id"`
	LabelID string `boil:"label_id" json:"label_id" toml:"label_id" yaml:"label_id"`

	R *taskLabelRelationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taskLabelRelationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaskLabelRelationColumns = struct {
	ID      string
	TaskID  string
	LabelID string
}{
	ID:      "id",
	TaskID:  "task_id",
	LabelID: "label_id",
}

var TaskLabelRelationTableColumns = struct {
	ID      string
	TaskID  string
	LabelID string
}{
	ID:      "task_label_relations.id",
	TaskID:  "task_label_relations.task_id",
	LabelID: "task_label_relations.label_id",
}

// Generated where

var TaskLabelRelationWhere = struct {
	ID      whereHelperstring
	TaskID  whereHelperstring
	LabelID whereHelperstring
}{
	ID:      whereHelperstring{field: "\"task_label_relations\".\"id\""},
	TaskID:  whereHelperstring{field: "\"task_label_relations\".\"task_id\""},
	LabelID: whereHelperstring{field: "\"task_label_relations\".\"label_id\""},
}

// TaskLabelRelationRels is where relationship names are stored.
var TaskLabelRelationRels = struct {
	Label string
	Task  string
}{
	Label: "Label",
	Task:  "Task",
}

// taskLabelRelationR is where relationships are stored.
type taskLabelRelationR struct {
	Label *Label `boil:"Label" json:"Label" toml:"Label" yaml:"Label"`
	Task  *Task  `boil:"Task" json:"Task" toml:"Task" yaml:"Task"`
}

// NewStruct creates a new relationship struct
func (*taskLabelRelationR) NewStruct() *taskLabelRelationR {
	return &taskLabelRelationR{}
}

func (r *taskLabelRelationR) GetLabel() *Label {
	if r == nil {
		return nil
	}
	return r.Label
}

func (r *taskLabelRelationR) GetTask() *Task {
	if r == nil {
		return nil
	}
	return r.Task
}

// taskLabelRelationL is where Load methods for each relationship are stored.
type taskLabelRelationL struct{}

var (
	taskLabelRelationAllColumns            = []string{"id", "task_id", "label_id"}
	taskLabelRelationColumnsWithoutDefault = []string{"id", "task_id", "label_id"}
	taskLabelRelationColumnsWithDefault    = []string{}
	taskLabelRelationPrimaryKeyColumns     = []string{"id"}
	taskLabelRelationGeneratedColumns      = []string{}
)

type (
	// TaskLabelRelationSlice is an alias for a slice of pointers to TaskLabelRelation.
	// This should almost always be used instead of []TaskLabelRelation.
	TaskLabelRelationSlice []*TaskLabelRelation
	// TaskLabelRelationHook is the signature for custom TaskLabelRelation hook methods
	TaskLabelRelationHook func(context.Context, boil.ContextExecutor, *TaskLabelRelation) error

	taskLabelRelationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taskLabelRelationType                 = reflect.TypeOf(&TaskLabelRelation{})
	taskLabelRelationMapping              = queries.MakeStructMapping(taskLabelRelationType)
	taskLabelRelationPrimaryKeyMapping, _ = queries.BindMapping(taskLabelRelationType, taskLabelRelationMapping, taskLabelRelationPrimaryKeyColumns)
	taskLabelRelationInsertCacheMut       sync.RWMutex
	taskLabelRelationInsertCache          = make(map[string]insertCache)
	taskLabelRelationUpdateCacheMut       sync.RWMutex
	taskLabelRelationUpdateCache          = make(map[string]updateCache)
	taskLabelRelationUpsertCacheMut       sync.RWMutex
	taskLabelRelationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var taskLabelRelationAfterSelectHooks []TaskLabelRelationHook

var taskLabelRelationBeforeInsertHooks []TaskLabelRelationHook
var taskLabelRelationAfterInsertHooks []TaskLabelRelationHook

var taskLabelRelationBeforeUpdateHooks []TaskLabelRelationHook
var taskLabelRelationAfterUpdateHooks []TaskLabelRelationHook

var taskLabelRelationBeforeDeleteHooks []TaskLabelRelationHook
var taskLabelRelationAfterDeleteHooks []TaskLabelRelationHook

var taskLabelRelationBeforeUpsertHooks []TaskLabelRelationHook
var taskLabelRelationAfterUpsertHooks []TaskLabelRelationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TaskLabelRelation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskLabelRelationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TaskLabelRelation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskLabelRelationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TaskLabelRelation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskLabelRelationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TaskLabelRelation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskLabelRelationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TaskLabelRelation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskLabelRelationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TaskLabelRelation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskLabelRelationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TaskLabelRelation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskLabelRelationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TaskLabelRelation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskLabelRelationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TaskLabelRelation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskLabelRelationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTaskLabelRelationHook registers your hook function for all future operations.
func AddTaskLabelRelationHook(hookPoint boil.HookPoint, taskLabelRelationHook TaskLabelRelationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		taskLabelRelationAfterSelectHooks = append(taskLabelRelationAfterSelectHooks, taskLabelRelationHook)
	case boil.BeforeInsertHook:
		taskLabelRelationBeforeInsertHooks = append(taskLabelRelationBeforeInsertHooks, taskLabelRelationHook)
	case boil.AfterInsertHook:
		taskLabelRelationAfterInsertHooks = append(taskLabelRelationAfterInsertHooks, taskLabelRelationHook)
	case boil.BeforeUpdateHook:
		taskLabelRelationBeforeUpdateHooks = append(taskLabelRelationBeforeUpdateHooks, taskLabelRelationHook)
	case boil.AfterUpdateHook:
		taskLabelRelationAfterUpdateHooks = append(taskLabelRelationAfterUpdateHooks, taskLabelRelationHook)
	case boil.BeforeDeleteHook:
		taskLabelRelationBeforeDeleteHooks = append(taskLabelRelationBeforeDeleteHooks, taskLabelRelationHook)
	case boil.AfterDeleteHook:
		taskLabelRelationAfterDeleteHooks = append(taskLabelRelationAfterDeleteHooks, taskLabelRelationHook)
	case boil.BeforeUpsertHook:
		taskLabelRelationBeforeUpsertHooks = append(taskLabelRelationBeforeUpsertHooks, taskLabelRelationHook)
	case boil.AfterUpsertHook:
		taskLabelRelationAfterUpsertHooks = append(taskLabelRelationAfterUpsertHooks, taskLabelRelationHook)
	}
}

// One returns a single taskLabelRelation record from the query.
func (q taskLabelRelationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TaskLabelRelation, error) {
	o := &TaskLabelRelation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for task_label_relations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TaskLabelRelation records from the query.
func (q taskLabelRelationQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaskLabelRelationSlice, error) {
	var o []*TaskLabelRelation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to TaskLabelRelation slice")
	}

	if len(taskLabelRelationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TaskLabelRelation records in the query.
func (q taskLabelRelationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count task_label_relations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q taskLabelRelationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if task_label_relations exists")
	}

	return count > 0, nil
}

// Label pointed to by the foreign key.
func (o *TaskLabelRelation) Label(mods ...qm.QueryMod) labelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LabelID),
	}

	queryMods = append(queryMods, mods...)

	return Labels(queryMods...)
}

// Task pointed to by the foreign key.
func (o *TaskLabelRelation) Task(mods ...qm.QueryMod) taskQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TaskID),
	}

	queryMods = append(queryMods, mods...)

	return Tasks(queryMods...)
}

// LoadLabel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taskLabelRelationL) LoadLabel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaskLabelRelation interface{}, mods queries.Applicator) error {
	var slice []*TaskLabelRelation
	var object *TaskLabelRelation

	if singular {
		var ok bool
		object, ok = maybeTaskLabelRelation.(*TaskLabelRelation)
		if !ok {
			object = new(TaskLabelRelation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaskLabelRelation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaskLabelRelation))
			}
		}
	} else {
		s, ok := maybeTaskLabelRelation.(*[]*TaskLabelRelation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaskLabelRelation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaskLabelRelation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taskLabelRelationR{}
		}
		args = append(args, object.LabelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taskLabelRelationR{}
			}

			for _, a := range args {
				if a == obj.LabelID {
					continue Outer
				}
			}

			args = append(args, obj.LabelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`labels`),
		qm.WhereIn(`labels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Label")
	}

	var resultSlice []*Label
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Label")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for labels")
	}

	if len(labelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Label = foreign
		if foreign.R == nil {
			foreign.R = &labelR{}
		}
		foreign.R.TaskLabelRelations = append(foreign.R.TaskLabelRelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LabelID == foreign.ID {
				local.R.Label = foreign
				if foreign.R == nil {
					foreign.R = &labelR{}
				}
				foreign.R.TaskLabelRelations = append(foreign.R.TaskLabelRelations, local)
				break
			}
		}
	}

	return nil
}

// LoadTask allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taskLabelRelationL) LoadTask(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaskLabelRelation interface{}, mods queries.Applicator) error {
	var slice []*TaskLabelRelation
	var object *TaskLabelRelation

	if singular {
		var ok bool
		object, ok = maybeTaskLabelRelation.(*TaskLabelRelation)
		if !ok {
			object = new(TaskLabelRelation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaskLabelRelation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaskLabelRelation))
			}
		}
	} else {
		s, ok := maybeTaskLabelRelation.(*[]*TaskLabelRelation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaskLabelRelation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaskLabelRelation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taskLabelRelationR{}
		}
		args = append(args, object.TaskID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taskLabelRelationR{}
			}

			for _, a := range args {
				if a == obj.TaskID {
					continue Outer
				}
			}

			args = append(args, obj.TaskID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tasks`),
		qm.WhereIn(`tasks.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Task")
	}

	var resultSlice []*Task
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Task")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tasks")
	}

	if len(taskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Task = foreign
		if foreign.R == nil {
			foreign.R = &taskR{}
		}
		foreign.R.TaskLabelRelations = append(foreign.R.TaskLabelRelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TaskID == foreign.ID {
				local.R.Task = foreign
				if foreign.R == nil {
					foreign.R = &taskR{}
				}
				foreign.R.TaskLabelRelations = append(foreign.R.TaskLabelRelations, local)
				break
			}
		}
	}

	return nil
}

// SetLabel of the taskLabelRelation to the related item.
// Sets o.R.Label to related.
// Adds o to related.R.TaskLabelRelations.
func (o *TaskLabelRelation) SetLabel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Label) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"task_label_relations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"label_id"}),
		strmangle.WhereClause("\"", "\"", 2, taskLabelRelationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LabelID = related.ID
	if o.R == nil {
		o.R = &taskLabelRelationR{
			Label: related,
		}
	} else {
		o.R.Label = related
	}

	if related.R == nil {
		related.R = &labelR{
			TaskLabelRelations: TaskLabelRelationSlice{o},
		}
	} else {
		related.R.TaskLabelRelations = append(related.R.TaskLabelRelations, o)
	}

	return nil
}

// SetTask of the taskLabelRelation to the related item.
// Sets o.R.Task to related.
// Adds o to related.R.TaskLabelRelations.
func (o *TaskLabelRelation) SetTask(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Task) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"task_label_relations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"task_id"}),
		strmangle.WhereClause("\"", "\"", 2, taskLabelRelationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TaskID = related.ID
	if o.R == nil {
		o.R = &taskLabelRelationR{
			Task: related,
		}
	} else {
		o.R.Task = related
	}

	if related.R == nil {
		related.R = &taskR{
			TaskLabelRelations: TaskLabelRelationSlice{o},
		}
	} else {
		related.R.TaskLabelRelations = append(related.R.TaskLabelRelations, o)
	}

	return nil
}

// TaskLabelRelations retrieves all the records using an executor.
func TaskLabelRelations(mods ...qm.QueryMod) taskLabelRelationQuery {
	mods = append(mods, qm.From("\"task_label_relations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"task_label_relations\".*"})
	}

	return taskLabelRelationQuery{q}
}

// FindTaskLabelRelation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaskLabelRelation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TaskLabelRelation, error) {
	taskLabelRelationObj := &TaskLabelRelation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"task_label_relations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, taskLabelRelationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from task_label_relations")
	}

	if err = taskLabelRelationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return taskLabelRelationObj, err
	}

	return taskLabelRelationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TaskLabelRelation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no task_label_relations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskLabelRelationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taskLabelRelationInsertCacheMut.RLock()
	cache, cached := taskLabelRelationInsertCache[key]
	taskLabelRelationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taskLabelRelationAllColumns,
			taskLabelRelationColumnsWithDefault,
			taskLabelRelationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(taskLabelRelationType, taskLabelRelationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taskLabelRelationType, taskLabelRelationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"task_label_relations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"task_label_relations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into task_label_relations")
	}

	if !cached {
		taskLabelRelationInsertCacheMut.Lock()
		taskLabelRelationInsertCache[key] = cache
		taskLabelRelationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TaskLabelRelation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TaskLabelRelation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	taskLabelRelationUpdateCacheMut.RLock()
	cache, cached := taskLabelRelationUpdateCache[key]
	taskLabelRelationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taskLabelRelationAllColumns,
			taskLabelRelationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update task_label_relations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"task_label_relations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, taskLabelRelationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taskLabelRelationType, taskLabelRelationMapping, append(wl, taskLabelRelationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update task_label_relations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for task_label_relations")
	}

	if !cached {
		taskLabelRelationUpdateCacheMut.Lock()
		taskLabelRelationUpdateCache[key] = cache
		taskLabelRelationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q taskLabelRelationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for task_label_relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for task_label_relations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaskLabelRelationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskLabelRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"task_label_relations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, taskLabelRelationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in taskLabelRelation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all taskLabelRelation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TaskLabelRelation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no task_label_relations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskLabelRelationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taskLabelRelationUpsertCacheMut.RLock()
	cache, cached := taskLabelRelationUpsertCache[key]
	taskLabelRelationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			taskLabelRelationAllColumns,
			taskLabelRelationColumnsWithDefault,
			taskLabelRelationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			taskLabelRelationAllColumns,
			taskLabelRelationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert task_label_relations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(taskLabelRelationPrimaryKeyColumns))
			copy(conflict, taskLabelRelationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"task_label_relations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(taskLabelRelationType, taskLabelRelationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taskLabelRelationType, taskLabelRelationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert task_label_relations")
	}

	if !cached {
		taskLabelRelationUpsertCacheMut.Lock()
		taskLabelRelationUpsertCache[key] = cache
		taskLabelRelationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TaskLabelRelation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaskLabelRelation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no TaskLabelRelation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taskLabelRelationPrimaryKeyMapping)
	sql := "DELETE FROM \"task_label_relations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from task_label_relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for task_label_relations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q taskLabelRelationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no taskLabelRelationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from task_label_relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for task_label_relations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaskLabelRelationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(taskLabelRelationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskLabelRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"task_label_relations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taskLabelRelationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from taskLabelRelation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for task_label_relations")
	}

	if len(taskLabelRelationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaskLabelRelation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTaskLabelRelation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaskLabelRelationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaskLabelRelationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskLabelRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"task_label_relations\".* FROM \"task_label_relations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taskLabelRelationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in TaskLabelRelationSlice")
	}

	*o = slice

	return nil
}

// TaskLabelRelationExists checks if the TaskLabelRelation row exists.
func TaskLabelRelationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"task_label_relations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if task_label_relations exists")
	}

	return exists, nil
}

// Exists checks if the TaskLabelRelation row exists.
func (o *TaskLabelRelation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TaskLabelRelationExists(ctx, exec, o.ID)
}
